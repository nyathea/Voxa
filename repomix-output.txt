This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-04T09:20:47.397Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
  workflows/
    github-releases-to-discord.yml
Discord/
  Assets.xcassets/
    AccentColor.colorset/
      Contents.json
    AppIcon.appiconset/
      Contents.json
    Contents.json
    Info.plist
  Extensions/
    UserDefaults.swift
  Preview Content/
    Preview Assets.xcassets/
      Contents.json
  Resources/
    Plugins/
      AppleEmojis.js
      FakeNitro.js
  Settings/
    CustomCSSView.swift
    GeneralView.swift
    PluginsView.swift
    SettingsView.swift
  ContentView.swift
  Discord.entitlements
  DiscordApp.swift
  DiscordWindowContent.swift
  Info.plist
  Plugin.swift
  SecondaryWindowController.swift
  Vars.swift
  WebView.swift
Voxa.xcodeproj/
  project.pbxproj
.gitattributes
.gitignore
appcast.xml
CODE_OF_CONDUCT.md
Discord.entitlements
FUNDING.yml
Info.plist
LICENSE
Package.swift
README.md

================================================================
Files
================================================================

================
File: .github/ISSUE_TEMPLATE/bug_report.md
================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

================
File: .github/ISSUE_TEMPLATE/feature_request.md
================
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

================
File: .github/workflows/github-releases-to-discord.yml
================
on:
  release:
    types: [published]

jobs:
  github-releases-to-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: GitHub Releases To Discord
        uses: SethCohen/github-releases-to-discord@v1
        with:
          webhook_url: ${{ secrets.WEBHOOK_URL }}
          color: "2105893"
          username: "Release Changelog"
          avatar_url: "https://example.com/avatar.png"
          content: "||@everyone||"
          footer_title: "Release Notification"
          footer_icon_url: "https://example.com/footer-icon.png"
          footer_timestamp: true
          max_description: '4096'
          reduce_headings: true

================
File: Discord/Assets.xcassets/AccentColor.colorset/Contents.json
================
{
  "colors" : [
    {
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: Discord/Assets.xcassets/AppIcon.appiconset/Contents.json
================
{
  "images" : [
    {
      "filename" : "image-16x16.jpg",
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "16x16"
    },
    {
      "filename" : "image-32x32 1.jpg",
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "16x16"
    },
    {
      "filename" : "image-32x32.jpg",
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "32x32"
    },
    {
      "filename" : "image-64x64.jpg",
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "32x32"
    },
    {
      "filename" : "image-128x128.jpg",
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "128x128"
    },
    {
      "filename" : "image-256x256 1.jpg",
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "128x128"
    },
    {
      "filename" : "image-256x256.jpg",
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "256x256"
    },
    {
      "filename" : "image-512x512 1.jpg",
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "256x256"
    },
    {
      "filename" : "image-512x512.jpg",
      "idiom" : "mac",
      "scale" : "1x",
      "size" : "512x512"
    },
    {
      "filename" : "AppIcon512x512@2x.png",
      "idiom" : "mac",
      "scale" : "2x",
      "size" : "512x512"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: Discord/Assets.xcassets/Contents.json
================
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: Discord/Assets.xcassets/Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <!-- Add these keys -->
    <key>NSMicrophoneUsageDescription</key>
    <string>Discord needs access to your microphone for voice chat and calls.</string>
    <key>NSCameraUsageDescription</key>
    <string>Discord needs access to your camera for video chat and calls.</string>
    <key>NSLocationWhenInUseUsageDescription</key>
    <string>Discord needs access to your location for certain features.</string>
    <!-- Rest of your existing Info.plist entries -->
</dict>
</plist>

================
File: Discord/Extensions/UserDefaults.swift
================
//
//  UserDefaults.swift
//  Mythic
//
//  Created by vapidinfinity (esi) on 26/5/2024.
//

// Copyright Â© 2024 vapidinfinity

// From Mythic. (https://getmythic.app/)

import Foundation

extension UserDefaults {
    @discardableResult
    func encodeAndSet<T: Encodable>(_ data: T, forKey key: String) throws -> Data {
        let encodedData = try PropertyListEncoder().encode(data)
        set(encodedData, forKey: key)
        return encodedData
    }
    
    @discardableResult
    func encodeAndRegister(defaults registrationDictionary: [String: Encodable]) throws -> [String: Any] {
        for (key, value) in registrationDictionary {
            let encodedData = try PropertyListEncoder().encode(value)
            register(defaults: [key: encodedData])
        }
        
        return dictionaryRepresentation()
    }
    
    func decodeAndGet<T: Decodable>(_ type: T.Type, forKey key: String) throws -> T? {
        guard let data = data(forKey: key) else { return nil }
        let decodedData = try PropertyListDecoder().decode(T.self, from: data)
        return decodedData
    }
}

================
File: Discord/Preview Content/Preview Assets.xcassets/Contents.json
================
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

================
File: Discord/Resources/Plugins/AppleEmojis.js
================
// ==VoxaPlugin==
// @name: Apple Emojis
// @author: DevilBro
// @description: Replaces Discord's Emojis with Apple's Emojis.
// @url: https://github.com/mwittrien/BetterDiscordAddons/tree/master/Themes/EmojiReplace
// ==/VoxaPlugin==

const emojiStyle = document.createElement('style');
emojiStyle.textContent = `@import url(https://mwittrien.github.io/BetterDiscordAddons/Themes/EmojiReplace/base/Apple.css)`;
document.head.appendChild(emojiStyle);

================
File: Discord/Resources/Plugins/FakeNitro.js
================
// ==VoxaPlugin==
// @name: FakeNitro
// @author: Stossy11
// @description: Simulates Nitro.
// ==/VoxaPlugin==

let z;
let isEnabled = true;  // Flag to control the script's execution

function loader() {
    if (!isEnabled) {
        return;  // If the script is disabled, do nothing
    }

    window.webpackChunkdiscord_app.push([
        [Math.random()], {},
        e => {
            window.wpRequire = e;
        }
    ]);
    
    let e = () => Object.keys(wpRequire.c).map((e => wpRequire.c[e].exports)).filter((e => e)),
        t = t => {
            for (const n of e()) {
                if (n.default && t(n.default)) return n.default;
                if (n.Z && t(n.Z)) return n.Z;
                if (t(n)) return n;
            }
        },
        n = t => {
            let n = [];
            for (const s of e()) s.default && t(s.default) ? n.push(s.default) : t(s) && n.push(s);
            return n;
        },
        s = (...e) => t((t => e.every((e => void 0 !== t[e])))),
        a = (...e) => n((t => e.every((e => void 0 !== t[e])))),
        r = e => new Promise((t => setTimeout(t, e)));

    if (!s("getCurrentUser").getCurrentUser()) {
        return;
    } else {
        clearInterval(z);
    }

    s("getCurrentUser").getCurrentUser().premiumType = 2;
    let i = s("sendMessage");
    i.__sendMessage = i.__sendMessage || i._sendMessage;
    
    i._sendMessage = async function(e, t, n) {
        // Handle emoji replacements
        if (t?.validNonShortcutEmojis?.length > 0) {
            t.validNonShortcutEmojis.forEach((emoji) => {
                const emojiRegex = new RegExp(`<(a|):${emoji.originalName || emoji.name}:${emoji.id}>`, 'g');
                // Construct the URL with size=48
                const emojiUrl = emoji.animated ?
                    `https://cdn.discordapp.com/emojis/${emoji.id}.gif?size=48` :
                    `https://cdn.discordapp.com/emojis/${emoji.id}.png?size=48`;
                // Replace the emoji with its name wrapped in a Markdown-style link
                t.content = t.content.replace(emojiRegex, `[${emoji.name}](${emojiUrl})`);
            });
        }

        // Handle stickers
        if (n?.stickerIds?.length > 0) {
            n.stickerIds.forEach((stickerId) => {
                t.content = t.content + " https://media.discordapp.net/stickers/" + stickerId + ".webp?size=160";
            });
            n = {
                ...n,
                stickerIds: undefined
            };
        }

        // Handle message length splitting
        if (t.content.length > 2000) {
            let a = t.content.split(/([\S\s]{1,2000})/g);
            
            // Handle code block splitting
            if (a[1].match(/```/g)?.length % 2 !== 0 && a[3].length <= 1980) {
                let e = a[1];
                a[1] = e.substring(0, 1997) + "```";
                let t = a[1].match(/```[^\n ]+/g);
                t = t[t.length % 2 === 0 ? t.length - 2 : t.length - 1].replace("```", "");
                let n = "```";
                a[3].match(/```/g)?.length >= 1 && a[3].match(/```/g)?.length % 2 !== 0 && (n = "");
                a[3] = "```" + t + "\n" + e.substring(1997, 2000) + a[3] + n;
            }

            // Send split messages
            let l = s("getCachedChannelJsonForGuild").getChannel(e).rateLimitPerUser;
            await i.__sendMessage.bind(i)(e, {
                ...t,
                content: a[1]
            }, n);

            let o = false;
            while (!o) {
                await r(l);
                let s = i.__sendMessage.bind(i)(e, {
                    ...t,
                    content: a[3]
                }, n).catch((e) => {
                    l = 1000 * e.body.retry_after;
                    o = false;
                });
                if (s = await s, s?.ok) return await s;
            }
        }

        return await i.__sendMessage.bind(i)(e, t, n);
    };
}

z = setInterval(loader, 1);

================
File: Discord/Settings/CustomCSSView.swift
================
import SwiftUI
import WebKit

struct CustomCSSView: View {
    @AppStorage("customCSS") private var customCSS: String = ""

    var body: some View {
        TextEditor(text: $customCSS)
            .padding()
            .onChange(of: customCSS) {
                Vars.webViewReference!.evaluateJavaScript(
                    "document.getElementById('voxaCustomStyle').textContent = `\(customCSS)`;")
            }
    }
}

================
File: Discord/Settings/GeneralView.swift
================
import SwiftUI

struct GeneralView: View {
    @AppStorage("discordUsesSystemAccent") private var fullSystemAccent: Bool = true
    @AppStorage("discordSidebarDividerUsesSystemAccent") private var sidebarDividerSystemAccent: Bool = true
    @AppStorage("discordReleaseChannel") private var discordReleaseChannel: String = "stable"
    @State private var discordReleaseChannelSelection: DiscordReleaseChannel = .stable

    // ===== PROXY SUPPORT ADDED =====
    @AppStorage("useDiscordProxy") private var useDiscordProxy: Bool = false
    @AppStorage("discordProxyAddress") private var discordProxyAddress: String = ""
    // ================================

    var body: some View {
        ScrollView {
            Form {
                HStack {
                    Text("Join The Discord")
                    Spacer()
                    Button("Join Discord") {
                        let link = URL(string:"https://discord.gg/Dps8HnDBpw")!
                        let request = URLRequest(url: link)
                        Vars.webViewReference!.load(request)
                    }
                }

                HStack {
                    Text("Support Us On GitHub")
                    Spacer()
                    Button("Go To Voxa's GitHub") {
                        let url = URL(string: "https://github.com/plyght/Voxa")!
                        NSWorkspace.shared.open(url)
                    }
                }

                Toggle(isOn: $fullSystemAccent) {
                    Text("Voxa matches system accent color")
                    Text("Modifying this setting will reload Voxa.")
                        .foregroundStyle(.placeholder)
                }
                .onChange(of: fullSystemAccent, { hardReloadWebView(webView: Vars.webViewReference!) })

                Toggle(isOn: $sidebarDividerSystemAccent) {
                    Text("Sidebar divider matches system accent color")
                    Text("Modifying this setting will reload Voxa.")
                        .foregroundStyle(.placeholder)
                }
                .onChange(of: sidebarDividerSystemAccent, { hardReloadWebView(webView: Vars.webViewReference!) })

                Picker(selection: $discordReleaseChannelSelection, content: {
                    ForEach(DiscordReleaseChannel.allCases, id: \.self) {
                        Text($0.description)
                    }
                }, label: {
                    Text("Discord Release Channel")
                    Text("Modifying this setting will reload Voxa.")
                        .foregroundStyle(.placeholder)
                })
                .onChange(of: discordReleaseChannelSelection) {
                    switch discordReleaseChannelSelection {
                    case .stable:
                        discordReleaseChannel = "stable"
                    case .PTB:
                        discordReleaseChannel = "ptb"
                    case .canary:
                        discordReleaseChannel = "canary"
                    }
                }
                .onChange(of: discordReleaseChannelSelection, { hardReloadWebView(webView: Vars.webViewReference!) })
                
                // ===== PROXY SUPPORT ADDED =====
                Section(header: Text("Proxy Settings")) {
                    Toggle("Use Proxy for Discord", isOn: $useDiscordProxy)
                    if useDiscordProxy {
                        TextField("Enter proxy URL (e.g. http://proxy.example.com:8080)",
                                  text: $discordProxyAddress)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                    }
                }
                // ================================
            }
            .formStyle(.grouped)
        }
    }
}

#Preview {
    GeneralView()
}

================
File: Discord/Settings/PluginsView.swift
================
import SwiftUI
import WebKit

struct PluginsView: View {
    @State public var pluginsChanged: Bool = false

    var body: some View {
        Form {
            ForEach(availablePlugins) { plugin in
                PluginListItem(
                    plugin: plugin,
                    pluginsChanged: $pluginsChanged
                )
            }
        }
        .formStyle(.grouped)

        if pluginsChanged {
            Form {
                HStack {
                    Text("Refresh Voxa to Apply Changes")
                    Spacer()
                    Button("Refresh") {
                        hardReloadWebView(webView: Vars.webViewReference!)

                        withAnimation {
                            pluginsChanged = false
                        }
                    }
                }
            }
            .formStyle(.grouped)
        }
    }
}

struct PluginListItem: View {
    let plugin: Plugin
    @Binding var pluginsChanged: Bool

    var body: some View {
        Toggle(
            isOn: Binding(
                get: { activePlugins.contains(plugin) },
                set: { isActive in
                    if isActive {
                        activePlugins.append(plugin)
                    } else {
                        activePlugins.removeAll(where: { $0 == plugin })
                    }

                    withAnimation {
                        pluginsChanged = true
                    }
                }
            )
        ) {
            Section {
                HStack {
                    Text(plugin.name)
                        .foregroundStyle(.primary)

                    if let url = plugin.url {
                        Button {
                            NSWorkspace.shared.open(url)
                        } label: {
                            Image(systemName: "globe")
                                .foregroundColor(.blue)
                        }
                        .buttonStyle(.plain)
                    }
                }
            } footer: {
                Text(plugin.author)
                    .foregroundStyle(.secondary)
                Text(plugin.description)
                    .foregroundStyle(.tertiary)
            }
        }
    }
}

#Preview {
    PluginsView()
}

================
File: Discord/Settings/SettingsView.swift
================
import SwiftUI

struct SettingsView: View {
    @State private var selectedItem: String? = "general"
    
    var body: some View {
        NavigationSplitView(columnVisibility: .constant(.doubleColumn)) {
            List(selection: $selectedItem) {
                NavigationLink(value: "general") {
                    Label("General", systemImage: "gear")
                }
                NavigationLink(value: "plugins") {
                    Label("Plugins", systemImage: "puzzlepiece.extension")
                }
                NavigationLink(value: "customcss") {
                    Label("Custom CSS", systemImage: "paintbrush")
                }
            }
            .padding(.top)
            .frame(width: 215)
            .toolbar(removing: .sidebarToggle)
        } detail: {
            switch selectedItem {
            case "general": GeneralView()
            case "plugins": PluginsView()
            case "customcss": CustomCSSView()
            default: Text("")
            }
        }
        .frame(minWidth: 715, maxWidth: 715, minHeight: 470, maxHeight: .infinity)
    }
}

================
File: Discord/ContentView.swift
================
//
//  ContentView.swift
//  Discord
//
//  Created by Austin Thomas on 24/11/2024.
//

import SwiftUI
import AppKit

struct ContentView: View {
    // *Analysis*: Add minimal logging or user guidance
    var body: some View {
        // If you wanted a small text area or overlay, you could do it here
        DiscordWindowContent(channelClickWidth: 1000)
            .onAppear {
                print("ContentView has appeared.")
            }
    }
}

struct DraggableView: NSViewRepresentable {
    class Coordinator: NSObject {
        @objc func handlePanGesture(_ gesture: NSPanGestureRecognizer) {
            guard let window = gesture.view?.window, let event = NSApp.currentEvent else { return }

            switch gesture.state {
            case .began, .changed:
                window.performDrag(with: event)
            default:
                break
            }
        }
    }

    func makeNSView(context: Context) -> NSView {
        let view = NSView()
        view.wantsLayer = true
        view.layer?.backgroundColor = .clear

        // Ensure the view is above others and can receive mouse events
        view.translatesAutoresizingMaskIntoConstraints = false
        view.layer?.zPosition = 999

        let panGesture = NSPanGestureRecognizer(
            target: context.coordinator,
            action: #selector(Coordinator.handlePanGesture(_:))
        )
        panGesture.allowedTouchTypes = [.direct]
        view.addGestureRecognizer(panGesture)

        return view
    }

    func updateNSView(_ nsView: NSView, context: Context) {}

    func makeCoordinator() -> Coordinator {
        Coordinator()
    }
}

struct VisualEffectView: NSViewRepresentable {
    let material: NSVisualEffectView.Material
    let blendingMode: NSVisualEffectView.BlendingMode

    func makeNSView(context: Context) -> NSVisualEffectView {
        let visualEffectView = NSVisualEffectView()
        visualEffectView.material = material
        visualEffectView.blendingMode = blendingMode
        return visualEffectView
    }

    func updateNSView(_ visualEffectView: NSVisualEffectView, context: Context) {
        visualEffectView.material = material
        visualEffectView.blendingMode = blendingMode
    }
}

#Preview {
    ContentView()
}

================
File: Discord/Discord.entitlements
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.automation.apple-events</key>
	<true/>
	<key>com.apple.security.cs.allow-dyld-environment-variables</key>
	<true/>
	<key>com.apple.security.cs.allow-jit</key>
	<true/>
	<key>com.apple.security.cs.allow-unsigned-executable-memory</key>
	<true/>
	<key>com.apple.security.device.audio-input</key>
	<true/>
	<key>com.apple.security.device.camera</key>
	<true/>
	<key>com.apple.security.device.microphone</key>
	<true/>
	<key>com.apple.security.device.usb</key>
	<true/>
	<key>com.apple.security.personal-information.photos-library</key>
	<true/>
	<key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
	<array>
		<string>com.apple.WebKit.WebContent</string>
		<string>com.apple.WebKit.WebContent.Development</string>
		<string>com.apple.WebKit.GPU</string>
		<string>com.apple.WebKit.Networking</string>
	</array>
	<key>com.apple.security.temporary-exception.sbpl</key>
	<array>
		<string>(allow mach-lookup (global-name-regex #"^com.apple.WebKit.*))</string>
		<string>(allow mach-lookup (global-name "com.apple.audio.AudioComponentRegistrar"))</string>
	</array>
</dict>
</plist>

================
File: Discord/DiscordApp.swift
================
//
//  DiscordApp.swift
//  Discord
//
//  Created by Austin Thomas on 24/11/2024.
//

import AppKit
import Foundation
import SwiftUI
import UnixDomainSocket

class WindowDelegate: NSObject, NSWindowDelegate {
    func windowDidResize(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }

    func windowDidEndLiveResize(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }

    func windowDidMove(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }

    func windowDidLayout(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }

    func windowDidBecomeKey(_ notification: Notification) {
        repositionTrafficLights(for: notification)
    }

    private func repositionTrafficLights(for notification: Notification) {
        guard let window = notification.object as? NSWindow else { return }

        let repositionBlock = {
            window.standardWindowButton(.closeButton)?.isHidden = false
            window.standardWindowButton(.miniaturizeButton)?.isHidden = false
            window.standardWindowButton(.zoomButton)?.isHidden = false

            // Position traffic lights
            window.standardWindowButton(.closeButton)?.setFrameOrigin(NSPoint(x: 10, y: -5))
            window.standardWindowButton(.miniaturizeButton)?.setFrameOrigin(NSPoint(x: 30, y: -5))
            window.standardWindowButton(.zoomButton)?.setFrameOrigin(NSPoint(x: 50, y: -5))
        }

        // Execute immediately
        repositionBlock()

        // And after a slight delay (0.1 s) to catch any animation completions
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            repositionBlock()
        }
    }
}

@main
struct DiscordApp: App {
    @NSApplicationDelegateAdaptor(AppDelegate.self) var appDelegate

    var body: some Scene {
        WindowGroup {
            ContentView()
                .frame(minWidth: 800, minHeight: 400)
                .onAppear {
                    // Use a guard to ensure there's a main screen
                    if NSScreen.main == nil {
                        print("No available main screen to set initial window frame.")
                        return
                    }

                    // If there's a main application window, configure it
                    if let window = NSApplication.shared.windows.first {
                        // Configure window for resizing
                        window.styleMask.insert(.resizable)

                        // Assign delegate for traffic light positioning
                        window.delegate = appDelegate.windowDelegate
                    }
                }
        }
        .windowStyle(.hiddenTitleBar)
        .commands {
            CommandGroup(replacing: .newItem) {
                Button("Reload") {
                    hardReloadWebView(webView: Vars.webViewReference!)
                }
                .keyboardShortcut("r", modifiers: .command)
            }
        }

        Settings {
            SettingsView()
        }
    }
}

class AppDelegate: NSObject, NSApplicationDelegate {
    let windowDelegate = WindowDelegate()
}

================
File: Discord/DiscordWindowContent.swift
================
import SwiftUI
import WebKit
import UnixDomainSocket

struct DiscordWindowContent: View {
    var channelClickWidth: CGFloat
    @AppStorage("discordReleaseChannel") private var discordReleaseChannel: String = "stable"

    // Reference to the underlying WKWebView
    @State var webViewReference: WKWebView?
    
    var body: some View {
        ZStack(alignment: .topLeading) {
            // Main background & web content
            ZStack {
                // Add a subtle system effect
                VisualEffectView(material: .sidebar, blendingMode: .behindWindow)
                
                // Embed the Discord WebView
                WebView(
                    channelClickWidth: channelClickWidth,
                    initialURL: DiscordReleaseChannel.allCases.first(where: { $0.rawValue == discordReleaseChannel })!.url,
                    webViewReference: $webViewReference
                )
                .frame(maxWidth: .infinity, maxHeight: .infinity)
                .onChange(of: webViewReference) {
                    Vars.webViewReference = webViewReference
                }
            }

            // Draggable area for traffic lights
            DraggableView()
                .frame(height: 48)
        }
        .ignoresSafeArea()
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .onDisappear {
            // *Analysis*: If you wanted to do cleanup or set webViewReference = nil, you could do so here.
            print("DiscordWindowContent disappeared.")
        }
    }
}

#Preview {
    DiscordWindowContent(channelClickWidth: 1000)
}

================
File: Discord/Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleExecutable</key>
	<string>Voxa</string>
	<key>CFBundleName</key>
	<string>Voxa</string>
	<key>CFBundleDocumentTypes</key>
	<array>
		<dict>
			<key>CFBundleTypeIconSystemGenerated</key>
			<integer>1</integer>
			<key>CFBundleTypeName</key>
			<string>Voxa</string>
			<key>CFBundleTypeRole</key>
			<string>Viewer</string>
			<key>LSHandlerRank</key>
			<string>Default</string>
		</dict>
	</array>
	<key>CFBundleIconFile</key>
	<string></string>
	<key>LSMinimumSystemVersion</key>
	<string>$(MACOSX_DEPLOYMENT_TARGET)</string>
	<key>NSAppTransportSecurity</key>
	<dict>
		<key>NSAllowsArbitraryLoads</key>
		<true/>
	</dict>
</dict>
</plist>

================
File: Discord/Plugin.swift
================
//
//  Plugin.swift
//  Discord
//
//  Created by vapidinfinity (esi) on 27/1/2025.
//

import Foundation

var activePlugins: [Plugin] {
    get {
        do {
            let pluginURLs = try UserDefaults.standard.decodeAndGet([URL].self, forKey: "activePluginURLs") ?? []
            return try pluginURLs.compactMap({ try Plugin(fileURL: $0) })
        } catch {
            print("Error fetching active plugins from UserDefaults: \(error)")
        }

        return []
    }
    set {
        do {
            try UserDefaults.standard.encodeAndSet(newValue.map(\.fileURL), forKey: "activePluginURLs")
        } catch {
            print("Error storing active plugins in UserDefaults: \(error)")
        }
    }
}

var availablePlugins: [Plugin] {
    guard let resources = Bundle.main.resourceURL else {
        return []
    }
    var plugins: [Plugin] = []

    let resourceContents = (try? FileManager.default.contentsOfDirectory(atPath: resources.path)) ?? []

    for file in resourceContents where file.hasSuffix(".js") {
        let fileURL = resources.appending(path: file)

        var isDir: ObjCBool = false
        if FileManager.default.fileExists(atPath: fileURL.path, isDirectory: &isDir), !isDir.boolValue {
            do {
                let plugin = try Plugin(fileURL: fileURL)
                plugins.append(plugin)
            } catch {
                print("Couldn't fetch plugin at \(fileURL.path): \(error.localizedDescription)")
            }
        }
    }

    return plugins
}

struct Plugin: Identifiable, Equatable, Codable {
    static func == (lhs: Plugin, rhs: Plugin) -> Bool {
        return lhs.fileURL == rhs.fileURL
    }

    var id: UUID = UUID()
    var name: String = "Unknown"
    var author: String = "Unknown"
    var description: String = "Unknown"
    var url: URL?

    var contents: String = ""
    var fileURL: URL

    
    init(fileURL: URL) throws {
        self.fileURL = fileURL

        let rawPlugin = try String(contentsOfFile: fileURL.path, encoding: .utf8)
        let lines = rawPlugin.split(whereSeparator: \.isNewline)

        guard
            let initialLine = lines.firstIndex(where: {(try? Regex("==[^=]+==").firstMatch(in: String($0)) != nil) ?? false }),
            let terminalLine = lines.firstIndex(where: { (try? Regex("==/[^=]+==").firstMatch(in: String($0)) != nil) ?? false })
        else {
            return
        }

        for line in lines[initialLine...terminalLine] {
            guard
                let match = try? Regex(#"@(\w+):? ([^\n]+)"#).firstMatch(in: String(line)),
                let label = match[1].substring,
                let content = match[2].substring
            else {
                continue
            }

            switch label {
            case "name":
                self.name = String(content)
            case "author":
                self.author = String(content)
            case "description":
                self.description = String(content)
            case "url":
                self.url = URL(string: String(content))
            default:
                print("Unhandled Plugin header label \"\(label)\"; ignoring.")
            }
        }

        self.contents = lines[terminalLine ..< lines.endIndex].joined(separator: "\n")
    }

    struct ExtractionError: LocalizedError {  }
}

================
File: Discord/SecondaryWindowController.swift
================
import AppKit
import SwiftUI
import WebKit

class SecondaryWindow: NSWindow {
    override func awakeFromNib() {
        super.awakeFromNib()
        positionTrafficLights()
    }

    override func setFrame(_ frameRect: NSRect, display flag: Bool, animate animateFlag: Bool) {
        super.setFrame(frameRect, display: flag, animate: animateFlag)
        positionTrafficLights()
    }

    override func makeKeyAndOrderFront(_ sender: Any?) {
        super.makeKeyAndOrderFront(sender)
        positionTrafficLights()
    }

    override func makeKey() {
        super.makeKey()
        positionTrafficLights()
    }

    override func makeMain() {
        super.makeMain()
        positionTrafficLights()
    }

    private func positionTrafficLights() {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }

            // Force layout if needed
            self.layoutIfNeeded()

            // Position each button with a slight delay to ensure they're ready
            let buttons: [(NSWindow.ButtonType, CGPoint)] = [
                (.closeButton, NSPoint(x: 10, y: -5)),
                (.miniaturizeButton, NSPoint(x: 30, y: -5)),
                (.zoomButton, NSPoint(x: 50, y: -5)),
            ]

            for (buttonType, point) in buttons {
                if let button = self.standardWindowButton(buttonType) {
                    button.isHidden = false
                    button.setFrameOrigin(point)
                }
            }
        }
    }
}

class SecondaryWindowController: NSWindowController {
    convenience init(url: String, channelClickWidth: CGFloat) {
        let window = SecondaryWindow(
            contentRect: NSRect(x: 0, y: 0, width: 800, height: 600),
            styleMask: [.titled, .closable, .miniaturizable, .resizable, .fullSizeContentView],
            backing: .buffered,
            defer: false
        )

        // Configure window appearance
        window.titlebarAppearsTransparent = true
        window.titleVisibility = .hidden
        window.toolbarStyle = .unifiedCompact
        window.backgroundColor = .clear

        // Create the SwiftUI view for the window with custom CSS
        let contentView = SecondaryWindowView(url: url, channelClickWidth: channelClickWidth)
        window.contentView = NSHostingView(rootView: contentView)

        self.init(window: window)

        // Use the shared window delegate from AppDelegate
        if let appDelegate = NSApplication.shared.delegate as? AppDelegate {
            window.delegate = appDelegate.windowDelegate
        }

        // Ensure traffic lights are visible
        window.standardWindowButton(.closeButton)?.isHidden = false
        window.standardWindowButton(.miniaturizeButton)?.isHidden = false
        window.standardWindowButton(.zoomButton)?.isHidden = false
    }
}

struct SecondaryWindowView: View {
    let url: String
    let channelClickWidth: CGFloat

    var body: some View {
        DiscordWindowContent(
            channelClickWidth: channelClickWidth
        )
        .frame(minWidth: 200, minHeight: 200)
    }
}

struct SecondaryWindowScene: Scene {
    let url: String
    let channelClickWidth: CGFloat

    var body: some Scene {
        WindowGroup {
            SecondaryWindowView(url: url, channelClickWidth: channelClickWidth)
        }
        .windowStyle(.hiddenTitleBar)
        .windowResizability(.contentSize)
        .defaultPosition(.center)
        .defaultSize(width: 800, height: 600)
    }
}

================
File: Discord/Vars.swift
================
import WebKit

class Vars {
    static var webViewReference: WKWebView?
}

enum DiscordReleaseChannel: String, CaseIterable {
    case stable = "stable"
    case PTB = "ptb"
    case canary = "canary"

    var description: String {
        switch self {
        case .stable:
            return "Stable"
        case .PTB:
            return "Public Test Branch (PTB)"
        case .canary:
            return "Canary"
        }
    }

    var url: URL {
        switch self {
        case .stable:
            return URL(string: "https://discord.com/app")!
        case .PTB:
            return URL(string: "https://ptb.discord.com/app")!
        case .canary:
            return URL(string: "https://canary.discord.com/app")!
        }
    }
}

================
File: Discord/WebView.swift
================
import SwiftUI
import DiscordRPCBridge
import Foundation
import UserNotifications
import OSLog
@preconcurrency import WebKit

// MARK: - Constants

/// CSS for accent color customization
var hexAccentColor: String? {
    if let accentColor = NSColor.controlAccentColor.usingColorSpace(.sRGB) {
        let red = Int(accentColor.redComponent * 255)
        let green = Int(accentColor.greenComponent * 255)
        let blue = Int(accentColor.blueComponent * 255)
        return String(format: "#%02X%02X%02X", red, green, blue)
    }
    return nil
}

/// Non-dynamic default CSS applied to the webview.
let rootCSS = """
:root {
    --background-accent: rgba(0, 0, 0, 0.5) !important;
    --background-floating: transparent !important;
    --background-message-highlight: transparent !important;
    --background-message-highlight-hover: transparent !important;
    --background-message-hover: transparent !important;
    --background-mobile-primary: transparent !important;
    --background-mobile-secondary: transparent !important;
    --background-modifier-accent: transparent !important;
    --background-modifier-active: transparent !important;
    --background-modifier-hover: transparent !important;
    --background-modifier-selected: transparent !important;
    --background-nested-floating: transparent !important;
    --background-primary: transparent !important;
    --background-secondary: transparent !important;
    --background-secondary-alt: transparent !important;
    --background-tertiary: transparent !important;
    --bg-overlay-3: transparent !important;
    --channeltextarea-background: transparent !important;
    --background-secondary-alt: transparent !important;
}
"""

struct SuffixedCSSStyle: Codable {
    let prefix: String
    let styles: [String: String]
}

/// CSS Styles that are sent to a script to automatically be suffixed and updated dynamically.
/// You may explicitly add suffixes if necessary (e.g. if there are multiple objects that share the same prefix)
var suffixedCSSStyles: [String: [String: String]] = [
    "guilds": [
        "margin-top": "48px"
    ],
    "scroller": [
        "padding-top": "none",
        "mask-image": "linear-gradient(to bottom, black calc(100% - 36px), transparent 100%)",
    ],
    "themed_fc4f04": [
        "background-color": "transparent"
    ],
    "themed__9293f": [
        "background-color": "transparent"
    ],
    "button_df39bd": [
        "background-color": "rgba(0, 0, 0, 0.15)"
    ],
    "chatContent": [
        "background-color": "transparent",
        "background": "transparent"
    ],
    "chat": [
        "background": "transparent"
    ],
    "quickswitcher": [
        "background-color": "transparent",
        "-webkit-backdrop-filter": "blur(5px)"
    ],
    "content": [
        "background": "none"
    ],
    "container": [
        "background-color": "transparent"
    ],
    "mainCard": [
        "background-color": "rgba(0, 0, 0, 0.15)"
    ],
    "listItem_c96c45:has(div[aria-label='Download Apps'])": [
        "display": "none"
    ],
    "children_fc4f04:after": [
        "background": "0",
        "width": "0"
    ],
    "expandedFolderBackground": [
        "background": "var(--activity-card-background)"
    ],
    "folder": [
        "background": "var(--activity-card-background)"
    ],
    "floating": [
        "background": "var(--activity-card-background)"
    ],
    "content_f75fb0:before": [
        "display": "none"
    ],
    "outer": [
        "background-color": "transparent"
    ]
]

// MARK: - Utility Functions

/// Retrieves the contents of a plugin file
func getPluginContents(name fileName: String) -> String {
    if let filePath = Bundle.main.path(forResource: fileName, ofType: "js") {
        do {
            return try String(contentsOfFile: filePath, encoding: .utf8)
        } catch {
            print("Error reading plugin file contents: \(error.localizedDescription)")
        }
    }
    return ""
}

// MARK: - Plugin and CSS Loader

/// Loads plugins and CSS into the provided WebView
func loadPluginsAndCSS(webView: WKWebView) {
    @AppStorage("discordUsesSystemAccent") var fullSystemAccent: Bool = true
    @AppStorage("discordSidebarDividerUsesSystemAccent") var sidebarDividerSystemAccent: Bool = true

    let dynamicRootCSS = """
    /* CSS variables that require reinitialisation on view reload */
    \({
        guard let accent = hexAccentColor,
            fullSystemAccent == true else {
            return ""
        }

        return """
        :root {
        /* brand */
            --bg-brand: \(accent) !important;
            \({ () -> String in
                var values = [String]()
                for i in stride(from: 5, through: 95, by: 5) {
                    let hexAlpha = String(format: "%02X", Int(round((Double(i) / 100.0) * 255)))
                    values.append("--brand-\(String(format: "%02d", i))a: \(accent)\(hexAlpha);")
                }
                return values.joined(separator: "\n")
            }())
            --brand-260: \(accent)1A !important;
            --brand-500: \(accent) !important;
            --brand-560: \(accent)26 !important; /* filled button hover */
            --brand-600: \(accent)30 !important; /* filled button clicked */
        
        /* foregrounds */
            --mention-foreground: \(accent) !important;
            --mention-background: \(accent)26 !important;
            --control-brand-foreground: \(accent)32 !important;
            --control-brand-foreground-new: \(accent)30 !important;
        }
        """
    }())
    """

    // Also requires re-initialisation on view reload
    suffixedCSSStyles["guildSeparator"] = [
        "background-color": {
            guard let accent = hexAccentColor,
                  sidebarDividerSystemAccent == true else {
                return """
                color-mix(/* --background-modifier-accent */
                    in oklab,
                    hsl(var(--primary-500-hsl) / 0.48) 100%,
                    hsl(var(--theme-base-color-hsl, 0 0% 0%) / 0.48) var(--theme-base-color-amount, 0%)
                )
                """
            }
            return accent
        }()
    ]

    // Inject default CSS
    webView.configuration.userContentController.addUserScript(
        WKUserScript(
            source: """
            const defaultStyle = document.createElement('style');
            defaultStyle.id = 'voxaStyle';
            defaultStyle.textContent = `\(rootCSS + "\n\n" + dynamicRootCSS)`;
            document.head.appendChild(defaultStyle);
            
            const customStyle = document.createElement('style');
            customStyle.id = 'voxaCustomStyle';
            customStyle.textContent = "";
            document.head.appendChild(customStyle);
            """,
            injectionTime: .atDocumentEnd,
            forMainFrameOnly: true
        )
    )

    let prefixStyles = suffixedCSSStyles.map { SuffixedCSSStyle(prefix: $0.key, styles: $0.value) }

    guard let styleData: Data = {
        do {
            return try JSONEncoder().encode(prefixStyles)
        } catch {
            print("Error encoding CSS styles to JSON: \(error)")
            return nil
        }
    }(), let styles = String(data: styleData, encoding: .utf8) else {
        print("Error converting style data to JSON string")
        return
    }

    let escapedStyles = styles
            .replacingOccurrences(of: #"\"#, with: #"\\"#)

    webView.configuration.userContentController.addUserScript(
        WKUserScript(
            source: """
            (function() {
              const prefixes = JSON.parse(`\(escapedStyles)`);
              if (!prefixes.length) {
                console.log("No prefixes provided.");
                return;
              }

              // Each prefix maps to a Set of matching classes
              const classSets = prefixes.map(() => new Set());

              function processElementClasses(element) {
                element.classList.forEach(cls => {
                  prefixes.forEach((prefixConfig, index) => {
                    const { prefix, styles } = prefixConfig;
                    if (cls.startsWith(prefix + '_') || cls === prefix) {
                      classSets[index].add(cls);
                      applyImportantStyles(element, styles);
                    }
                  });
                });
              }

              function applyImportantStyles(element, styles) {
                for (const [prop, val] of Object.entries(styles)) {
                  element.style.setProperty(prop, val, 'important');
                }
              }

              function buildPrefixCSS(prefixConfigs) {
                let cssOutput = '';
                for (const { prefix, styles } of prefixConfigs) {
                  const hasSpace = prefix.includes(' ');
                  const placeholder = hasSpace ? prefix : `${prefix}_placeholder`;
                  cssOutput += `.${placeholder} {\n`;
                  for (const [prop, val] of Object.entries(styles)) {
                    cssOutput += `  ${prop}: ${val} !important;\n`;
                  }
                  cssOutput += `}\n\n`;
                }
                return cssOutput;
              }

              function showParsedCSS() {
                console.log(`Generated CSS from JSON:\n${buildPrefixCSS(prefixes)}`);
              }

              // Initial pass over all elements
              document.querySelectorAll('*').forEach(processElementClasses);

              // Monitor DOM changes
              const observer = new MutationObserver(mutations => {
                mutations.forEach(mutation => {
                  if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(node => {
                      if (node.nodeType === Node.ELEMENT_NODE) {
                        processElementClasses(node);
                        node.querySelectorAll('*').forEach(processElementClasses);
                      }
                    });
                  } else if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                    processElementClasses(mutation.target);
                  }
                });
              });

              observer.observe(document.body, { childList: true, attributes: true, subtree: true });

              function displayClassReports() {
                prefixes.forEach((prefixConfig, index) => {
                  const { prefix } = prefixConfig;
                  const matchedClasses = classSets[index];
                  if (matchedClasses.size > 0) {
                    console.log(`Matching classes for prefix "${prefix}":`);
                    matchedClasses.forEach(cls => console.log(cls));
                  } else {
                    console.log(`No matching classes found for prefix "${prefix}".`);
                  }
                });
              }

              // Initial log
              displayClassReports();
              // Re-log classes periodically
              setInterval(displayClassReports, 2000);

              // Expose CSS viewer
              window.showParsedCSS = showParsedCSS;
            })();        
            """,
            injectionTime: .atDocumentEnd,
            forMainFrameOnly: true
        )
    )

    // Load active plugins
    activePlugins.forEach { plugin in
        webView.configuration.userContentController.addUserScript(
            WKUserScript(
                source: plugin.contents,
                injectionTime: .atDocumentEnd,
                forMainFrameOnly: true
            )
        )
    }
}

// MARK: - WebView Representable

struct WebView: NSViewRepresentable {
    var channelClickWidth: CGFloat
    var initialURL: URL
    @Binding var webViewReference: WKWebView?
    private let rpcBridge = DiscordRPCBridge()
    
    // ===== PROXY SUPPORT ADDED =====
    @AppStorage("useDiscordProxy") private var useDiscordProxy: Bool = false
    @AppStorage("discordProxyAddress") private var discordProxyAddress: String = ""
    // ================================
    
    // Initializers
    init(channelClickWidth: CGFloat, initialURL: URL) {
        self.channelClickWidth = channelClickWidth
        self.initialURL = initialURL
        self._webViewReference = .constant(nil)
    }

    init(channelClickWidth: CGFloat, initialURL: URL, webViewReference: Binding<WKWebView?>) {
        self.channelClickWidth = channelClickWidth
        self.initialURL = initialURL
        self._webViewReference = webViewReference
    }

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    func makeNSView(context: Context) -> WKWebView {
        // MARK: WebView Configuration

        let config = WKWebViewConfiguration()

        config.applicationNameForUserAgent = "Version/17.2.1 Safari/605.1.15"

        // Enable media capture
        config.mediaTypesRequiringUserActionForPlayback = []
        config.allowsAirPlayForMediaPlayback = true

        // If macOS 14 or higher, enable fullscreen
        if #available(macOS 14.0, *) {
            config.preferences.isElementFullscreenEnabled = true
        }

        // Additional media constraints
        config.preferences.setValue(true, forKey: "mediaDevicesEnabled")
        config.preferences.setValue(true, forKey: "mediaStreamEnabled")
        config.preferences.setValue(true, forKey: "peerConnectionEnabled")
        config.preferences.setValue(true, forKey: "screenCaptureEnabled")

        // Allow inspector while app is running in DEBUG
#if DEBUG
        config.preferences.setValue(true, forKey: "developerExtrasEnabled")
#endif

        // Edit CSP to allow for 3rd party scripts and stylesheets to be loaded
        config.setValue(
            "default-src * 'unsafe-inline' 'unsafe-eval'; script-src * 'unsafe-inline' 'unsafe-eval'; connect-src * 'unsafe-inline'; img-src * data: blob: 'unsafe-inline'; frame-src *; style-src * 'unsafe-inline';",
            forKey: "overrideContentSecurityPolicy"
        )
        
        // ===== PROXY SUPPORT ADDED =====
        if useDiscordProxy,
           let proxyURL = URL(string: discordProxyAddress),
           let host = proxyURL.host,
           let port = proxyURL.port {
            let proxyConfiguration: [AnyHashable: Any] = [
                kCFNetworkProxiesHTTPEnable as String: true,
                kCFNetworkProxiesHTTPProxy as String: host,
                kCFNetworkProxiesHTTPPort as String: port,
                kCFNetworkProxiesHTTPSEnable as String: true,
                kCFNetworkProxiesHTTPSProxy as String: host,
                kCFNetworkProxiesHTTPSPort as String: port
            ]
            let schemeHandler = ProxiedSchemeHandler(proxyConfiguration: proxyConfiguration)
            config.setURLSchemeHandler(schemeHandler, forURLScheme: "proxied-http")
            config.setURLSchemeHandler(schemeHandler, forURLScheme: "proxied-https")
        }
        // ================================
        
        // MARK: WebView Initialisation

        let webView = WKWebView(frame: .zero, configuration: config)
        Task { @MainActor in webViewReference = webView }

        // Store a weak reference in Coordinator to break potential cycles
        context.coordinator.webView = webView

        // Configure webview delegates
        webView.uiDelegate = context.coordinator
        webView.navigationDelegate = context.coordinator

        // Make background transparent
        webView.setValue(false, forKey: "drawsBackground")

        // Add message handlers
        // If these properties are added to, ensure you remove the handlers as well in `Coordinator` `deinit`
        webView.configuration.userContentController.add(context.coordinator, name: "channelClick")
        webView.configuration.userContentController.add(context.coordinator, name: "notify")
        webView.configuration.userContentController.add(context.coordinator, name: "notificationPermission")

        // MARK: Script Injection

        // Media Permissions Script
        webView.configuration.userContentController.addUserScript(
            WKUserScript(
                source: """
                const originalGetUserMedia = navigator.mediaDevices.getUserMedia;
                navigator.mediaDevices.getUserMedia = async function(constraints) {
                    console.log('getUserMedia requested with constraints:', constraints);
                    return originalGetUserMedia.call(navigator.mediaDevices, constraints);
                };
                
                const originalEnumerateDevices = navigator.mediaDevices.enumerateDevices;
                navigator.mediaDevices.enumerateDevices = async function() {
                    console.log('enumerateDevices requested');
                    return originalEnumerateDevices.call(navigator.mediaDevices);
                };
                """,
                injectionTime: .atDocumentEnd,
                forMainFrameOnly: true
            )
        )

        // Channel Click Handler Script
        webView.configuration.userContentController.addUserScript(
            WKUserScript(
                source: """
                (function () {
                    document.addEventListener('click', function(e) {
                        const channel = e.target.closest('.blobContainer_a5ad63');
                        if (channel) {
                            window.webkit.messageHandlers.channelClick.postMessage({type: 'channel'});
                            return;
                        }
                
                        const link = e.target.closest('.link_c91bad');
                        if (link) {
                            e.preventDefault();
                            let href = link.getAttribute('href') || link.href || '/channels/@me';
                            if (href.startsWith('/')) {
                                href = 'https://discord.com' + href;
                            }
                            console.log('Link clicked with href:', href);
                            window.webkit.messageHandlers.channelClick.postMessage({type: 'user', url: href});
                            return;
                        }
                
                        const serverIcon = e.target.closest('.wrapper_f90abb');
                        if (serverIcon) {
                            window.webkit.messageHandlers.channelClick.postMessage({type: 'server'});
                        }
                    });
                })();
                """,
                injectionTime: .atDocumentEnd,
                forMainFrameOnly: true
            )
        )

        // Notification Handling Script
        webView.configuration.userContentController.addUserScript(
            WKUserScript(
                source: """
                (function () {
                    const Original = window.Notification;
                    let perm = "default";
                    const map = new Map();
                
                    Object.defineProperty(Notification, "permission", {
                        get: () => perm,
                        configurable: true,
                    });
                
                    class VoxaNotification extends Original {
                        constructor(title, options = {}) {
                            const id = crypto.randomUUID().toUpperCase();
                            super(title, options);
                            this.notificationId = id;
                            map.set(id, this);
                            window.webkit?.messageHandlers?.notify?.postMessage({
                                title,
                                options,
                                notificationId: id,
                            });
                
                            this.onshow = null;
                            setTimeout(() => {
                                this.dispatchEvent(new Event("show"));
                                if (typeof this._onshow === "function") this._onshow();
                            }, 0);
                        }
                    
                        close() {
                            if (this.notificationId) {
                                window.webkit?.messageHandlers?.closeNotification?.postMessage({
                                    id: this.notificationId,
                                });
                            }
                            super.close();
                        }
                    
                        set onshow(h) { this._onshow = h; }
                        get onshow() { return this._onshow; }
                    
                        set onerror(h) { this._onerror = h; }
                        get onerror() { return this._onerror; }
                    
                        handleError(e) {
                            if (typeof this._onerror === "function") this._onerror(e);
                        }
                    }
                
                    window.Notification = VoxaNotification;
                
                    Notification.requestPermission = function (cb) {
                        return new Promise((resolve) => {
                            window.webkit?.messageHandlers?.notificationPermission?.postMessage({});
                            window.notificationPermissionCallback = resolve;
                        }).then((res) => {
                            if (typeof cb === "function") cb(res);
                            return res;
                        });
                    };
                
                    window.addEventListener("nativePermissionResponse", (e) => {
                        if (window.notificationPermissionCallback) {
                            perm = e.detail.permission || "default";
                            window.notificationPermissionCallback(perm);
                            window.notificationPermissionCallback = null;
                        }
                    });
                
                    window.addEventListener("notificationError", (e) => {
                        const { notificationId, error } = e.detail;
                        const n = map.get(notificationId);
                        if (n) {
                            n.handleError(error);
                            map.delete(notificationId);
                        }
                    });
                
                    window.addEventListener("notificationSuccess", (e) => {
                        const { notificationId } = e.detail;
                        const n = map.get(notificationId);
                        if (n) {
                            console.log(`Notification successfully added: ${notificationId}`);
                            map.delete(notificationId);
                        }
                    });
                })();
                """,
                injectionTime: .atDocumentStart,
                forMainFrameOnly: false
            )
        )

        rpcBridge.startBridge(for: webView)

        loadPluginsAndCSS(webView: webView)
        // ===== PROXY SUPPORT ADDED =====
        var loadURL = initialURL
        if useDiscordProxy {
            var components = URLComponents(url: initialURL, resolvingAgainstBaseURL: false)
            if let scheme = components?.scheme?.lowercased() {
                if scheme == "http" {
                    components?.scheme = "proxied-http"
                } else if scheme == "https" {
                    components?.scheme = "proxied-https"
                }
            }
            if let newURL = components?.url {
                loadURL = newURL
            }
        }
        // ================================
        webView.load(URLRequest(url: loadURL))

        return webView
    }

    func updateNSView(_ nsView: WKWebView, context: Context) {
        // If you wish to update the webView here (e.g., reload or inject new CSS),
        // you can do so. Currently, no updates are necessary.
        loadPluginsAndCSS(webView: nsView)
    }

    // MARK: - Coordinator

    class Coordinator: NSObject, WKScriptMessageHandler, WKUIDelegate, WKNavigationDelegate {
        weak var webView: WKWebView?
        var parent: WebView

        init(_ parent: WebView) {
            self.parent = parent
        }

        deinit {
            // avoid memory leaks
            webView?.configuration.userContentController.removeScriptMessageHandler(forName: "channelClick")
            webView?.configuration.userContentController.removeScriptMessageHandler(forName: "notify")
            webView?.configuration.userContentController.removeScriptMessageHandler(forName: "notificationPermission")
        }

        // MARK: - WKWebView Delegate Methods

        @available(macOS 12.0, *)
        func webView(
            _ webView: WKWebView,
            requestMediaCapturePermissionFor origin: WKSecurityOrigin,
            initiatedByFrame frame: WKFrameInfo,
            type: WKMediaCaptureType,
            decisionHandler: @escaping (WKPermissionDecision) -> Void
        ) {
            print("Requesting permission for media type:", type)
            decisionHandler(.grant)
        }

        func webView(
            _ webView: WKWebView,
            runOpenPanelWith parameters: WKOpenPanelParameters,
            initiatedByFrame frame: WKFrameInfo,
            completionHandler: @escaping ([URL]?) -> Void
        ) {
            let openPanel = NSOpenPanel()
            openPanel.canChooseFiles = true
            openPanel.canChooseDirectories = false
            openPanel.allowsMultipleSelection = parameters.allowsMultipleSelection

            openPanel.begin { response in
                if response == .OK {
                    completionHandler(openPanel.urls)
                } else {
                    completionHandler(nil)
                }
            }
        }

        func webView(
            _ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction,
            decisionHandler: @escaping (WKNavigationActionPolicy) -> Void
        ) {
            if let url = navigationAction.request.url,
               navigationAction.navigationType == .linkActivated
            {
                NSWorkspace.shared.open(url)
                decisionHandler(.cancel)
            } else {
                decisionHandler(.allow)
            }
        }

        func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
            loadPluginsAndCSS(webView: webView)
        }

        // MARK: - Script Message Handling

        func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
            switch message.name {
            case "notify": /// Notification payload is sent to webview
                guard
                    let body = message.body as? [String: Any],
                    let title = body["title"] as? String,
                    let options = body["options"] as? [String: Any],
                    let notificationId = body["notificationId"] as? String
                else {
                    print("Received malformed notify message.")
                    return
                }

                print("Received notify message: \(title) - \(options) - ID: \(notificationId)")

                let notification = UNMutableNotificationContent()
                notification.title = title
                notification.body = options["body"] as? String ?? ""

                if let soundName = options["sound"] as? String {
                    notification.sound = UNNotificationSound(named: UNNotificationSoundName(soundName))
                } else {
                    notification.sound = .default
                }

                let request = UNNotificationRequest(
                    identifier: notificationId,
                    content: notification,
                    trigger: nil
                )

                UNUserNotificationCenter.current().add(request) { error in
                    guard error == nil else {
                        let error = error!
                        print("Error adding notification: \(error.localizedDescription)")

                        // Dispatch notification error event
                        Task { @MainActor in
                            do {
                                try await self.webView?.evaluateJavaScript("""
                                    window.dispatchEvent(
                                        new CustomEvent('notificationError', {
                                            detail: {
                                                notificationId: '\(notificationId)',
                                                error: '\(error.localizedDescription)'
                                            }
                                        })
                                    );
                                    """
                                )
                                print("Error response has additionally been dispatched to web content. (notificationId: \(notificationId))")
                            } catch {
                                print("Error evaluating notification error event JavaScript: \(error.localizedDescription)")
                            }
                        }
                        return
                    }

                    print("Notification added: \(title) - ID: \(notificationId)")

                    // Dispatch notification success event
                    Task { @MainActor in
                        do {
                            try await self.webView?.evaluateJavaScript("""
                                window.dispatchEvent(
                                    new CustomEvent('notificationSuccess', {
                                        detail: {
                                            notificationId: '\(notificationId)'
                                        }
                                    })
                                );
                                """
                            )
                            print("Success response dispatched to web content for notification ID: \(notificationId)")
                        } catch {
                            print("Error evaluating notification success event JavaScript: \(error.localizedDescription)")
                        }
                    }
                }

            case "notificationPermission": /// Notification permission payload is sent to webview
                print("Received notificationPermission message")
                UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
                    let permission = granted ? "granted" : "denied"
                    print("Notification permission \(permission)")

                    // Dispatch permission response event
                    Task { @MainActor in
                        do {
                            try await self.webView?.evaluateJavaScript("""
                                window.dispatchEvent(
                                    new CustomEvent('nativePermissionResponse', {
                                        detail: {
                                            permission: '\(permission)'
                                        }
                                    })
                                );
                                """
                            )
                            print("Permission response dispatched to web content")
                        } catch {
                            print("Error evaluating permission response event JavaScript: \(error.localizedDescription)")
                        }
                    }
                }

            default:
                print("Unimplemented message: \(message.name)")
            }
        }
    }
}


/// Performs a hard reload of the WebView by clearing scripts and reloading the initial URL
func hardReloadWebView(webView: WKWebView) {
    webView.configuration.userContentController.removeAllUserScripts()
    loadPluginsAndCSS(webView: webView)
    let releaseChannel = UserDefaults.standard.string(forKey: "discordReleaseChannel") ?? ""
    let url = DiscordReleaseChannel(rawValue: releaseChannel)?.url ?? DiscordReleaseChannel.stable.url

    webView.load(URLRequest(url: url))
}

/// ===== PROXY SUPPORT: Custom URL Scheme Handler =====
class ProxiedSchemeHandler: NSObject, WKURLSchemeHandler {
    let proxyConfiguration: [AnyHashable: Any]
    
    init(proxyConfiguration: [AnyHashable: Any]) {
        self.proxyConfiguration = proxyConfiguration
    }
    
    func webView(_ webView: WKWebView, start urlSchemeTask: WKURLSchemeTask) {
        guard let url = urlSchemeTask.request.url else {
            urlSchemeTask.didFailWithError(NSError(domain: "InvalidURL", code: -1, userInfo: nil))
            return
        }
        var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
        if components?.scheme == "proxied-http" {
            components?.scheme = "http"
        } else if components?.scheme == "proxied-https" {
            components?.scheme = "https"
        }
        guard let realURL = components?.url else {
            urlSchemeTask.didFailWithError(NSError(domain: "InvalidConvertedURL", code: -1, userInfo: nil))
            return
        }
        var newRequest = URLRequest(url: realURL)
        newRequest.allHTTPHeaderFields = urlSchemeTask.request.allHTTPHeaderFields
        
        let config = URLSessionConfiguration.default
        config.connectionProxyDictionary = proxyConfiguration
        let session = URLSession(configuration: config)
        let task = session.dataTask(with: newRequest) { data, response, error in
            if let error = error {
                urlSchemeTask.didFailWithError(error)
                return
            }
            if let response = response, let data = data {
                urlSchemeTask.didReceive(response)
                urlSchemeTask.didReceive(data)
                urlSchemeTask.didFinish()
            }
        }
        task.resume()
    }
    
    func webView(_ webView: WKWebView, stop urlSchemeTask: WKURLSchemeTask) {
        // Handle cancellation if needed.
    }
}

================
File: Voxa.xcodeproj/project.pbxproj
================
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 77;
	objects = {

/* Begin PBXBuildFile section */
		6A821BF82D4EA44600A3A9E4 /* DiscordRPCBridge in Frameworks */ = {isa = PBXBuildFile; productRef = 6A821BF72D4EA44600A3A9E4 /* DiscordRPCBridge */; };
		6A821C252D4EA98B00A3A9E4 /* DiscordRPCBridge in Frameworks */ = {isa = PBXBuildFile; productRef = 6A821C242D4EA98B00A3A9E4 /* DiscordRPCBridge */; };
		DC9455282D28B7FC0023E2BB /* Sparkle in Frameworks */ = {isa = PBXBuildFile; productRef = DC9455272D28B7FC0023E2BB /* Sparkle */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		D910A0852CF2B6F8005F6119 /* Voxa.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Voxa.app; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFileSystemSynchronizedBuildFileExceptionSet section */
		DCE2C6F82D37F3C300CFF277 /* Exceptions for "Discord" folder in "Discord" target */ = {
			isa = PBXFileSystemSynchronizedBuildFileExceptionSet;
			membershipExceptions = (
				Info.plist,
			);
			target = D910A0842CF2B6F8005F6119 /* Discord */;
		};
/* End PBXFileSystemSynchronizedBuildFileExceptionSet section */

/* Begin PBXFileSystemSynchronizedRootGroup section */
		D910A0872CF2B6F8005F6119 /* Discord */ = {
			isa = PBXFileSystemSynchronizedRootGroup;
			exceptions = (
				DCE2C6F82D37F3C300CFF277 /* Exceptions for "Discord" folder in "Discord" target */,
			);
			path = Discord;
			sourceTree = "<group>";
		};
/* End PBXFileSystemSynchronizedRootGroup section */

/* Begin PBXFrameworksBuildPhase section */
		D910A0822CF2B6F8005F6119 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6A821BF82D4EA44600A3A9E4 /* DiscordRPCBridge in Frameworks */,
				DC9455282D28B7FC0023E2BB /* Sparkle in Frameworks */,
				6A821C252D4EA98B00A3A9E4 /* DiscordRPCBridge in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		D910A07C2CF2B6F8005F6119 = {
			isa = PBXGroup;
			children = (
				D910A0872CF2B6F8005F6119 /* Discord */,
				D910A0862CF2B6F8005F6119 /* Products */,
			);
			sourceTree = "<group>";
		};
		D910A0862CF2B6F8005F6119 /* Products */ = {
			isa = PBXGroup;
			children = (
				D910A0852CF2B6F8005F6119 /* Voxa.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		D910A0842CF2B6F8005F6119 /* Discord */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = D910A0942CF2B6FA005F6119 /* Build configuration list for PBXNativeTarget "Discord" */;
			buildPhases = (
				D910A0812CF2B6F8005F6119 /* Sources */,
				D910A0822CF2B6F8005F6119 /* Frameworks */,
				D910A0832CF2B6F8005F6119 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			fileSystemSynchronizedGroups = (
				D910A0872CF2B6F8005F6119 /* Discord */,
			);
			name = Discord;
			packageProductDependencies = (
				DC9455272D28B7FC0023E2BB /* Sparkle */,
				6A821BF72D4EA44600A3A9E4 /* DiscordRPCBridge */,
				6A821C242D4EA98B00A3A9E4 /* DiscordRPCBridge */,
			);
			productName = Discord;
			productReference = D910A0852CF2B6F8005F6119 /* Voxa.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		D910A07D2CF2B6F8005F6119 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = 1;
				LastSwiftUpdateCheck = 1610;
				LastUpgradeCheck = 1620;
				TargetAttributes = {
					D910A0842CF2B6F8005F6119 = {
						CreatedOnToolsVersion = 16.1;
					};
				};
			};
			buildConfigurationList = D910A0802CF2B6F8005F6119 /* Build configuration list for PBXProject "Voxa" */;
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = D910A07C2CF2B6F8005F6119;
			minimizedProjectReferenceProxies = 1;
			packageReferences = (
				DC9455262D28B7FC0023E2BB /* XCRemoteSwiftPackageReference "Sparkle" */,
				6A821C232D4EA98B00A3A9E4 /* XCRemoteSwiftPackageReference "DiscordRPCBridge" */,
			);
			preferredProjectObjectVersion = 77;
			productRefGroup = D910A0862CF2B6F8005F6119 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				D910A0842CF2B6F8005F6119 /* Discord */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		D910A0832CF2B6F8005F6119 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		D910A0812CF2B6F8005F6119 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		D910A0922CF2B6FA005F6119 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				GENERATE_INFOPLIST_FILE = NO;
				INFOPLIST_FILE = Discord/Info.plist;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MACOSX_DEPLOYMENT_TARGET = 15.1;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				PRODUCT_NAME = Voxa;
				SDKROOT = macosx;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = "DEBUG $(inherited)";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		D910A0932CF2B6FA005F6119 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++20";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEAD_CODE_STRIPPING = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = YES;
				GCC_C_LANGUAGE_STANDARD = gnu17;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				GENERATE_INFOPLIST_FILE = NO;
				INFOPLIST_FILE = Discord/Info.plist;
				LOCALIZATION_PREFERS_STRING_CATALOGS = YES;
				MACOSX_DEPLOYMENT_TARGET = 15.1;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				PRODUCT_NAME = Voxa;
				SDKROOT = macosx;
				SWIFT_COMPILATION_MODE = wholemodule;
			};
			name = Release;
		};
		D910A0952CF2B6FA005F6119 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS = YES;
				CODE_SIGN_ENTITLEMENTS = Discord/Discord.entitlements;
				"CODE_SIGN_IDENTITY[sdk=macosx*]" = "-";
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				CURRENT_PROJECT_VERSION = 1;
				DEAD_CODE_STRIPPING = YES;
				DEVELOPMENT_ASSET_PATHS = "\"Discord/Preview Content\"";
				DEVELOPMENT_TEAM = "";
				ENABLE_HARDENED_RUNTIME = YES;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_KEY_CFBundleDisplayName = Voxa;
				INFOPLIST_KEY_LSApplicationCategoryType = "public.app-category.social-networking";
				INFOPLIST_KEY_NSCameraUsageDescription = "Need camera access for uploading images";
				INFOPLIST_KEY_NSHumanReadableCopyright = "";
				INFOPLIST_KEY_NSLocationUsageDescription = "Need location access for updating nearby friends";
				INFOPLIST_KEY_NSLocationWhenInUseUsageDescription = "This app will use your location to show features near you.";
				INFOPLIST_KEY_NSMicrophoneUsageDescription = "Need microphone access for uploading audio";
				INFOPLIST_KEY_NSPhotoLibraryUsageDescription = "Need photo library access for saving and uploading images";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				MACOSX_DEPLOYMENT_TARGET = 15.1;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = lol.peril.voxa;
				PRODUCT_NAME = Voxa;
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
			};
			name = Debug;
		};
		D910A0962CF2B6FA005F6119 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = AccentColor;
				ASSETCATALOG_COMPILER_INCLUDE_ALL_APPICON_ASSETS = YES;
				CODE_SIGN_ENTITLEMENTS = Discord/Discord.entitlements;
				"CODE_SIGN_IDENTITY[sdk=macosx*]" = "-";
				CODE_SIGN_STYLE = Automatic;
				COMBINE_HIDPI_IMAGES = YES;
				CURRENT_PROJECT_VERSION = 1;
				DEAD_CODE_STRIPPING = YES;
				DEVELOPMENT_ASSET_PATHS = "\"Discord/Preview Content\"";
				DEVELOPMENT_TEAM = "";
				ENABLE_HARDENED_RUNTIME = YES;
				ENABLE_PREVIEWS = YES;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_KEY_CFBundleDisplayName = Voxa;
				INFOPLIST_KEY_LSApplicationCategoryType = "public.app-category.social-networking";
				INFOPLIST_KEY_NSCameraUsageDescription = "Need camera access for uploading images";
				INFOPLIST_KEY_NSHumanReadableCopyright = "";
				INFOPLIST_KEY_NSLocationUsageDescription = "Need location access for updating nearby friends";
				INFOPLIST_KEY_NSLocationWhenInUseUsageDescription = "This app will use your location to show features near you.";
				INFOPLIST_KEY_NSMicrophoneUsageDescription = "Need microphone access for uploading audio";
				INFOPLIST_KEY_NSPhotoLibraryUsageDescription = "Need photo library access for saving and uploading images";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/../Frameworks",
				);
				MACOSX_DEPLOYMENT_TARGET = 15.1;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = lol.peril.voxa;
				PRODUCT_NAME = Voxa;
				SWIFT_EMIT_LOC_STRINGS = YES;
				SWIFT_VERSION = 5.0;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		D910A0802CF2B6F8005F6119 /* Build configuration list for PBXProject "Voxa" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				D910A0922CF2B6FA005F6119 /* Debug */,
				D910A0932CF2B6FA005F6119 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		D910A0942CF2B6FA005F6119 /* Build configuration list for PBXNativeTarget "Discord" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				D910A0952CF2B6FA005F6119 /* Debug */,
				D910A0962CF2B6FA005F6119 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */

/* Begin XCRemoteSwiftPackageReference section */
		6A821C232D4EA98B00A3A9E4 /* XCRemoteSwiftPackageReference "DiscordRPCBridge" */ = {
			isa = XCRemoteSwiftPackageReference;
			repositoryURL = "https://github.com/vapidinfinity/DiscordRPCBridge";
			requirement = {
				kind = upToNextMajorVersion;
				minimumVersion = 1.0.1;
			};
		};
		DC9455262D28B7FC0023E2BB /* XCRemoteSwiftPackageReference "Sparkle" */ = {
			isa = XCRemoteSwiftPackageReference;
			repositoryURL = "https://github.com/sparkle-project/Sparkle";
			requirement = {
				kind = upToNextMajorVersion;
				minimumVersion = 2.6.4;
			};
		};
/* End XCRemoteSwiftPackageReference section */

/* Begin XCSwiftPackageProductDependency section */
		6A821BF72D4EA44600A3A9E4 /* DiscordRPCBridge */ = {
			isa = XCSwiftPackageProductDependency;
			productName = DiscordRPCBridge;
		};
		6A821C242D4EA98B00A3A9E4 /* DiscordRPCBridge */ = {
			isa = XCSwiftPackageProductDependency;
			package = 6A821C232D4EA98B00A3A9E4 /* XCRemoteSwiftPackageReference "DiscordRPCBridge" */;
			productName = DiscordRPCBridge;
		};
		DC9455272D28B7FC0023E2BB /* Sparkle */ = {
			isa = XCSwiftPackageProductDependency;
			package = DC9455262D28B7FC0023E2BB /* XCRemoteSwiftPackageReference "Sparkle" */;
			productName = Sparkle;
		};
/* End XCSwiftPackageProductDependency section */
	};
	rootObject = D910A07D2CF2B6F8005F6119 /* Project object */;
}

================
File: .gitattributes
================
**/*.node filter=lfs diff=lfs merge=lfs -text

================
File: .gitignore
================
# Xcode
DerivedData/
*.xcworkspace/
xcuserdata/
*.xcodeproj/*
!*.xcodeproj/project.pbxproj
!*.xcodeproj/xcshareddata/**/*
*.xcscmblueprint

# Swift Package Manager
.build/
.swiftpm/xcode/package.xcworkspace/
Package.resolved

# Cocoapods
Pods/
Podfile.lock

# Carthage
Carthage/Build/

# Accio
Dependencies/
.accio/

# Fastlane
fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/
fastlane/test_output/
fastlane/tools/

# CocoaPods Keys
*.xcconfig

# Archives
*.xcarchive

# App data
*.appex.dSYM
*.dSYM

# Playground
timeline.xctimeline
playground.xcworkspace

# Swift pm
.swiftpm/

# Bundle artifacts
*.ipa
*.app.dSYM.zip

# Logs
*.log

# Dependency manager
Cartfile.resolved

# Other
*.DS_Store
*.swp
*.lock
*.xcuserstate
*.moved-aside
*.hmap
*.ipa
*.app.dSYM
*.xcuserdatad/ 

# macOS specific files
.DS_Store
.AppleDouble
.LSOverride

# Thumbnails
._*

# Files that might appear on external disk
.Spotlight-V100
.Trashes

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop

# Temporary files
.TemporaryItems
.apdisk

# SwiftLint
.swiftlint.yml

# Xcode logs
*.xccovreport
*.xccovreport/*
*.xccovarchive
*.xccovarchive/*

# Index
*.index

================
File: appcast.xml
================
<rss xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" version="2.0">
  <channel>
    <title>Voxa Releases</title>
    <link>https://github.com/plyght/voxa</link>
    <item>
      <title>Version 0.2</title>
      <sparkle:releaseNotesLink>
        https://github.com/plyght/voxa/releases/tag/v0.2
      </sparkle:releaseNotesLink>
      <enclosure
         url="https://github.com/plyght/voxa/releases/download/v0.2/Voxa.dmg"
         sparkle:version="100"
         sparkle:shortVersionString="1.0"
         length="12345678"
         type="application/x-apple-diskimage"
         sparkle:dsaSignature="...Signature Goes Here..." />
    </item>
  </channel>
</rss>

================
File: CODE_OF_CONDUCT.md
================
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
plyght@peril.lol.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
https://www.contributor-covenant.org/faq. Translations are available at
https://www.contributor-covenant.org/translations.

================
File: Discord.entitlements
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.device.camera</key>
    <true/>
    <key>com.apple.security.device.microphone</key>
    <true/>
    <key>com.apple.security.device.audio-input</key>
    <true/>
    <key>com.apple.security.device.usb</key>
    <true/>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.allow-dyld-environment-variables</key>
    <true/>
    <key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
    <array>
        <string>com.apple.WebKit.WebContent</string>
        <string>com.apple.WebKit.WebContent.Development</string>
        <string>com.apple.WebKit.GPU</string>
        <string>com.apple.WebKit.Networking</string>
    </array>
    <key>com.apple.security.temporary-exception.sbpl</key>
    <array>
        <string>(allow mach-lookup (global-name-regex #"^com.apple.WebKit.*))</string>
        <string>(allow mach-lookup (global-name "com.apple.audio.AudioComponentRegistrar"))</string>
    </array>
    <key>com.apple.security.automation.apple-events</key>
    <true/>
</dict>
</plist>

================
File: FUNDING.yml
================
ko_fi: plyght
buy_me_a_coffee: plyght
thanks_dev: # Replace with a single thanks.dev username

================
File: Info.plist
================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>NSMicrophoneUsageDescription</key>
    <string>Discord needs access to your microphone for voice chat and calls.</string>
    <key>NSCameraUsageDescription</key>
    <string>Discord needs access to your camera for video chat and calls.</string>
    <key>NSLocationWhenInUseUsageDescription</key>
    <string>Discord needs access to your location for certain features.</string>
    <key>CFBundleDocumentTypes</key>
    <array>
        <dict>
            <key>CFBundleTypeName</key>
            <string>Discord</string>
            <key>LSHandlerRank</key>
            <string>Default</string>
        </dict>
    </array>
    <key>CFBundleExecutable</key>
    <string>$(EXECUTABLE_NAME)</string>
    <key>CFBundleIconFile</key>
    <string></string>
    <key>CFBundleIdentifier</key>
    <string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>$(PRODUCT_NAME)</string>
    <key>CFBundlePackageType</key>
    <string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleVersion</key>
    <string>1</string>
    <key>LSMinimumSystemVersion</key>
    <string>$(MACOSX_DEPLOYMENT_TARGET)</string>
    <key>NSAppTransportSecurity</key>
    <dict>
        <key>NSAllowsArbitraryLoads</key>
        <true/>
    </dict>
    <key>LSApplicationCategoryType</key>
    <string>public.app-category.social-networking</string>
</dict>
</plist>

================
File: LICENSE
================
DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                    Version 2, December 2004

 Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>

 Everyone is permitted to copy and distribute verbatim or modified
 copies of this license document, and changing it is allowed as long
 as the name is changed.

            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. You just DO WHAT THE FUCK YOU WANT TO.

================
File: Package.swift
================
// swift-tools-version: 6.0
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: "Voxa",
    products: [
        // Products define the executables and libraries a package produces, making them visible to other packages.
        .library(
            name: "Voxa",
            targets: ["Voxa"])
    ],
    targets: [
        // Targets are the basic building blocks of a package, defining a module or a test suite.
        // Targets can depend on other targets in this package and products from dependencies.
        .target(
            name: "Voxa")
    ]
)

================
File: README.md
================
# Voxa

Voxa is a sleek, lightweight, native macOS Discord client built using SwiftUI. Designed for speed, efficiency, and a modern user experience, it brings the best of Discord to your Mac in a fully optimized package.

![SCR-20250116-mutv](https://github.com/user-attachments/assets/68c662e9-368b-4e9d-9d8a-ffde4e1b6c06)

## This project wouldn't have started without [@AustinGraphics](https://github.com/AustinGraphics), go support him!

### Discord Server

https://discord.gg/Dps8HnDBpw

### Website (in development)<sup><a href="#1source-code-repository---this-contains-the-source-code-and-related-documentation-for-the-project">1</a></sup>.

https://voxa.peril.lol

## Key Features

- **Native macOS Experience:** Built with SwiftUI, Voxa integrates seamlessly with macOS features for a polished and fast user interface.
- **Performance-Focused:** Lightweight design ensures low resource usage and high responsiveness.
- **Customizable Interface:** Modify appearance with custom CSS and theming.
- **Advanced Window Management:** Resizable and draggable windows with transparency and aesthetic layouts.
- **Privacy-First Permissions:** Fine-grained microphone, camera, and location access are available only when needed.
- **FakeNitro and other Vencord plugins:** FakeNitro and Apple Emojis have recently been implemented into Voxa and other BetterDiscord/Vencord plugins are expected soon! See [Upcoming Features](#upcoming-features).

## Known Issues

- Some items are fully transparent, lacking any translucency or blur effects.
- Certain items have not been fully integrated with transparent/translucent features.
- Light mode has a few minor, easily resolvable issues.
  - To fix this, your macOS settings need to be the same as your Voxa settings. For example, if I want to use light mode on Voxa, my system settings also need to be on light mode.

---

## Table of Contents

- [Installation](#installation)
- [Upcoming Features](#upcoming-features)

---

## Installation

### Using a Prebuilt Release

1. Download the latest `.dmg` file from the [Releases page](https://github.com/plyght/voxa/releases).
2. Open the `.dmg` file and drag the Voxa app to your `Applications` folder.
3. Launch Voxa from your Applications folder.

### Building From Source

1. Clone the repository:
    ```bash
    git clone https://github.com/plyght/Voxa.git
    cd Voxa
    ```

## For Upcoming Features, See The [Voxa Roadmap](https://github.com/users/plyght/projects/3)


## Star History

<a href="https://star-history.com/#plyght/voxa&Date">
 <picture>
   <source media="(prefers-color-scheme: dark)" srcset="https://api.star-history.com/svg?repos=plyght/voxa&type=Date&theme=dark" />
   <source media="(prefers-color-scheme: light)" srcset="https://api.star-history.com/svg?repos=plyght/voxa&type=Date" />
   <img alt="Star History Chart" src="https://api.star-history.com/svg?repos=plyght/voxa&type=Date" />
 </picture>
</a>

##### <sup>1</sup>[voxa.peril.lol Source Code](https://github.com/plyght/voxa.peril.lol) - This contains the source code of the Voxa website.
